from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

AUDIO_PATH = 'energocouch_tgBot\energocouch_tgBot\handlers\–≠–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫–∞_–°–∞—à–∏_–ë–µ–ª—è–∫–æ–≤–∞.mp3'
CHANNEL_ID=-1002485471071
router = Router()
ADMIN_ID=519234410

class Registration(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_tg_choice = State()
    waiting_for_phone_choice = State()
    waiting_for_phone_manual = State()
    waiting_for_confirmation = State()
    waiting_for_course_choice = State()

@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
   await message.answer(
       "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ë–µ–ª—è—à, —è –¥–æ–±—Ä—ã–π –¥—É—Ö-–ø–æ–º–æ—â–Ω–∏–∫ —ç–Ω–µ—Ä–≥–æ–∫–æ—É—á–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ë–µ–ª—è–∫–æ–≤–∞, –∞ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n"
        "\n"
        "<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é?</b>"
   )
   await state.set_state(Registration.waiting_for_full_name)


@router.message(Registration.waiting_for_full_name)
async def process_tg_choice(message: Message, state: FSMContext):
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)
    await message.answer(
        '–ö—Ä—É—Ç–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à—É —Å–≤–æ–π —Ç–≥_–∞–∫–∫–∞—É–Ω—Ç\n'
        '\n'
        '(<b>–Ω–∞–ø—Ä–∏–º–µ—Ä</b> @sumasoshedshiy)'
    )
    await state.set_state(Registration.waiting_for_tg_choice)


@router.message(Registration.waiting_for_tg_choice)
async def process_full_name(message: Message, state: FSMContext):
    tg_acc = message.text.strip()
    await state.update_data(tg_acc=tg_acc)

    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä', request_contact=True),
        types.KeyboardButton(text='–Ω–∞–ø–∏—à—É —Å–∞–º',)
       )

    await message.answer(
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:',
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(Registration.waiting_for_phone_choice)


@router.message(Registration.waiting_for_phone_choice, F.contact)
async def process_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await show_user_info_and_ask_subscription(message, state, message.bot)


@router.message(Registration.waiting_for_phone_choice, F.text.lower() == '–Ω–∞–ø–∏—à—É —Å–∞–º')
async def process_manual_choice(message: Message, state: FSMContext):
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.waiting_for_phone_manual)

@router.message(Registration.waiting_for_phone_manual)
async def process_manual_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await show_user_info_and_ask_subscription(message, state, message.bot)

async def show_user_info_and_ask_subscription(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    full_name = data.get('full_name')
    tg_acc = data.get('tg_acc')
    phone = data.get('phone')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {full_name}!\n"
        f"–¢–≤–æ–π Telegram: {tg_acc}\n"
        f"–¢–≤–æ–π –Ω–æ–º–µ—Ä: {phone}",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É (–≤–∞–º)
    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è üéâ\n"
            f"–ò–º—è: {full_name}\n"
            f"Telegram: {tg_acc}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}"
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É:", e)

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–¥–∞",
        callback_data='check_subscription')
    )
    await message.answer(
        "–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/angeliSani?\n"
        "\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–∫–æ—Ä–µ–π –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ª—É—á–∏—à—å —Ö–∞–ª—è–≤—É!",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Registration.waiting_for_confirmation)

@router.callback_query(Registration.waiting_for_confirmation, F.data == 'check_subscription')
async def process_check_subscription(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...')
    try:
        chat_member = await callback.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=callback.from_user.id)

        if chat_member.status in ("member", "administrator", "creator"):
            audio = FSInputFile(AUDIO_PATH)
            await callback.message.answer_audio(
                audio,
                caption="–í–æ—Ç —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ üéß\n"
                        "\n"
                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —É—Å–ª—É–≥–∏ –°–∞–Ω—å–∫–∞ –Ω–∞–∂–º–∏ –Ω–∞ /course"
            )
        else:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                url=f"https://t.me/angeliSani"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π –∫–∞–Ω–∞–ª
            ))
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ –Ω–∞ /start",
                reply_markup=builder.as_markup()
            )

    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞:", e)

    await callback.answer()

@router.message(Command('course'))
async def cmd_course(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
    text='–≠–Ω–µ—Ä–≥–æ–∫–æ—É—á–∏–Ω–≥ - –õ–∏—á–Ω–∞—è –≠–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏—è —Å –°–∞—à–µ–π –ë–µ–ª—è–∫–æ–≤—ã–º ‚Äì 7000 —Ä—É–±–ª–µ–π',
    url='https://payform.ru/tf83K7G/')
    )
    builder.row(types.InlineKeyboardButton(
        text='–≠–Ω–µ—Ä–≥–æ–∫–æ—É—á–∏–Ω–≥ ‚Äì –ü–µ—Ä–≤–∞—è/–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –≠–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏—è —Å –°–∞—à–µ–π –ë–µ–ª—è–∫–æ–≤—ã–º ‚Äì 3500 —Ä—É–±–ª–µ–π',
        url='https://payform.ru/gd83KgR/')
    )
    builder.row(types.InlineKeyboardButton(
        text='–¢–∞—Ä–∏—Ñ ¬´–ê–Ω–≥–µ–ª –ò–∑–æ–±–∏–ª–∏—è¬ª - 3333 —Ä—É–±–ª–µ–π',
        url='https://payform.ru/tf83Hgg/')
    )
    builder.row(types.InlineKeyboardButton(
        text='–¢–∞—Ä–∏—Ñ ¬´–°–µ—Ä–∞—Ñ–∏–º¬ª - 11111 —Ä—É–±–ª–µ–π',
        url='https://payform.ru/3b83JDE/')
    )

    await message.answer(
        '–•–æ—Ä–æ—à–µ–≥–æ –¥–µ–Ω—ë—á–∫–∞ –æ—Ç —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ C–∞–Ω—ë—á–∫–∞'
        '/n'
        '–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É, –ê–Ω–≥–µ–ª –°–∞–Ω–∏)',
        reply_markup=builder.as_markup(),
   )